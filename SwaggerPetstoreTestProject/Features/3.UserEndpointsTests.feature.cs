// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SwaggerPetstoreTestProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("3. User Endpoints Tests")]
    public partial class _3_UserEndpointsTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "3.UserEndpointsTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "3. User Endpoints Tests", "In order to be sure that API is working\r\nAs a operational manager of this API\r\nI " +
                    "want to test User endpoints", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3.1. When the user sends request to add a list of users, then the Success status " +
            "code and the message about successfull operation are returned")]
        public virtual void _3_1_WhenTheUserSendsRequestToAddAListOfUsersThenTheSuccessStatusCodeAndTheMessageAboutSuccessfullOperationAreReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3.1. When the user sends request to add a list of users, then the Success status " +
                    "code and the message about successfull operation are returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table22.AddRow(new string[] {
                            "4444",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
                table22.AddRow(new string[] {
                            "5555",
                            "SampleMan2",
                            "John",
                            "Doe",
                            "sample2@email.com",
                            "SampleMan2!",
                            "+79200000002",
                            "0"});
#line 8
 testRunner.When("the user sends request to add users with the following parameters", ((string)(null)), table22, "When ");
#line hidden
#line 12
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Type",
                            "Message"});
                table23.AddRow(new string[] {
                            "200",
                            "unknown",
                            "ok"});
#line 13
  testRunner.And("the message contains the following information", ((string)(null)), table23, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3.2. When the user sends request to get data about the user by username, then the" +
            " Success status code and the data about the user are returned")]
        public virtual void _3_2_WhenTheUserSendsRequestToGetDataAboutTheUserByUsernameThenTheSuccessStatusCodeAndTheDataAboutTheUserAreReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3.2. When the user sends request to get data about the user by username, then the" +
                    " Success status code and the data about the user are returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table24.AddRow(new string[] {
                            "5555",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
#line 18
 testRunner.Given("the user sends request to add users with the following parameters", ((string)(null)), table24, "Given ");
#line hidden
#line 21
 testRunner.When("the user sends request to get information about the user with username \'SampleMan" +
                        "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table25.AddRow(new string[] {
                            "5555",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
#line 23
  testRunner.And("the response contains the following information about the user", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3.3. When the user sends request to delete data about the user by username, then " +
            "the Success status code is returned")]
        public virtual void _3_3_WhenTheUserSendsRequestToDeleteDataAboutTheUserByUsernameThenTheSuccessStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3.3. When the user sends request to delete data about the user by username, then " +
                    "the Success status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table26.AddRow(new string[] {
                            "5555",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
#line 28
 testRunner.Given("the user sends request to add users with the following parameters", ((string)(null)), table26, "Given ");
#line hidden
#line 31
 testRunner.When("the user sends request to delete information about the user with username \'Sample" +
                        "Man1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3.4. When the user sends request to get data about the user by username that does" +
            "n\'t exist, then the Not Found status code is returned")]
        public virtual void _3_4_WhenTheUserSendsRequestToGetDataAboutTheUserByUsernameThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3.4. When the user sends request to get data about the user by username that does" +
                    "n\'t exist, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table27.AddRow(new string[] {
                            "5555",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
#line 35
 testRunner.Given("the user sends request to add users with the following parameters", ((string)(null)), table27, "Given ");
#line hidden
#line 38
 testRunner.When("the user sends request to get information about the user with username \'SampleMan" +
                        "2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Type",
                            "Message"});
                table28.AddRow(new string[] {
                            "1",
                            "error",
                            "User not found"});
#line 40
  testRunner.And("the message contains the following information", ((string)(null)), table28, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("3.5. When the user sends request to delete data about the user by username that d" +
            "oesn\'t exist, then the Not Found status code is returned")]
        public virtual void _3_5_WhenTheUserSendsRequestToDeleteDataAboutTheUserByUsernameThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3.5. When the user sends request to delete data about the user by username that d" +
                    "oesn\'t exist, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Username",
                            "FirstName",
                            "LastName",
                            "Email",
                            "Password",
                            "Phone",
                            "UserStatus"});
                table29.AddRow(new string[] {
                            "5555",
                            "SampleMan1",
                            "Sample",
                            "Man",
                            "sample1@email.com",
                            "SampleMan1!",
                            "+79200000001",
                            "0"});
#line 45
 testRunner.Given("the user sends request to add users with the following parameters", ((string)(null)), table29, "Given ");
#line hidden
#line 48
 testRunner.When("the user sends request to delete information about the user with username \'Sample" +
                        "Man2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
