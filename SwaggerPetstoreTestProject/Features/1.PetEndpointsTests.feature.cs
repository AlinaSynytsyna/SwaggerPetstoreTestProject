// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SwaggerPetstoreTestProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("1. Pet endpoints tests")]
    public partial class _1_PetEndpointsTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "1.PetEndpointsTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "1. Pet endpoints tests", "In order to be sure that API is working\r\nAs a operational manager of this API\r\nI " +
                    "want to test Pet endpoints", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.1. When the user sends request to add new pet to the store, then the Success st" +
            "atus code is returned")]
        public virtual void _1_1_WhenTheUserSendsRequestToAddNewPetToTheStoreThenTheSuccessStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.1. When the user sends request to add new pet to the store, then the Success st" +
                    "atus code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table1.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 8
 testRunner.When("the user sends request to add a new pet with the following parameters", ((string)(null)), table1, "When ");
#line hidden
#line 11
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table2.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 12
  testRunner.And("the response contains the following information about the pet", ((string)(null)), table2, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.2. When the user sends request to get data about the pet by ID, then the Succes" +
            "s status code and the data about the pet are returned")]
        public virtual void _1_2_WhenTheUserSendsRequestToGetDataAboutThePetByIDThenTheSuccessStatusCodeAndTheDataAboutThePetAreReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.2. When the user sends request to get data about the pet by ID, then the Succes" +
                    "s status code and the data about the pet are returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table3.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 17
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table3, "Given ");
#line hidden
#line 20
 testRunner.When("the user sends request to get information about the pet with ID 2222", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table4.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 22
  testRunner.And("the response contains the following information about the pet", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.3. When the user sends request to delete data about the pet by ID, then the Suc" +
            "cess status code is returned")]
        public virtual void _1_3_WhenTheUserSendsRequestToDeleteDataAboutThePetByIDThenTheSuccessStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.3. When the user sends request to delete data about the pet by ID, then the Suc" +
                    "cess status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table5.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 27
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table5, "Given ");
#line hidden
#line 30
 testRunner.When("the user sends request to delete information about the pet with ID 2222", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.4. When the user sends request to get data about the pet by ID that doesn\'t exi" +
            "st, then the Not Found status code is returned")]
        public virtual void _1_4_WhenTheUserSendsRequestToGetDataAboutThePetByIDThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.4. When the user sends request to get data about the pet by ID that doesn\'t exi" +
                    "st, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table6.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 34
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table6, "Given ");
#line hidden
#line 37
 testRunner.When("the user sends request to get information about the pet with ID 3333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Type",
                            "Message"});
                table7.AddRow(new string[] {
                            "1",
                            "error",
                            "Pet not found"});
#line 39
  testRunner.And("the message contains the following information", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("1.5. When the user sends request to delete data about the pet by ID that doesn\'t " +
            "exist, then the Not Found status code is returned")]
        public virtual void _1_5_WhenTheUserSendsRequestToDeleteDataAboutThePetByIDThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1.5. When the user sends request to delete data about the pet by ID that doesn\'t " +
                    "exist, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table8.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 44
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table8, "Given ");
#line hidden
#line 47
 testRunner.When("the user sends request to delete information about the pet with ID 3333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
