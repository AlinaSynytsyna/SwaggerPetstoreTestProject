// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SwaggerPetstoreTestProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("2. Store Endpoints Tests")]
    public partial class _2_StoreEndpointsTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "2.StoreEndpointsTests.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "2. Store Endpoints Tests", "In order to be sure that API is working\r\nAs a operational manager of this API\r\nI " +
                    "want to test Store endpoints", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2.1. When the user sends request to add new order on existing pet to the store, t" +
            "hen the Success status code is returned")]
        public virtual void _2_1_WhenTheUserSendsRequestToAddNewOrderOnExistingPetToTheStoreThenTheSuccessStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2.1. When the user sends request to add new order on existing pet to the store, t" +
                    "hen the Success status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table9.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 8
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table10.AddRow(new string[] {
                            "9",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 11
 testRunner.When("the user sends request to add a new order with the following parameters", ((string)(null)), table10, "When ");
#line hidden
#line 14
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table11.AddRow(new string[] {
                            "9",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 15
  testRunner.And("the response contains the following information about the order", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2.2. When the user sends request to get data about the order by ID, then the Succ" +
            "ess status code and the data about the order are returned")]
        public virtual void _2_2_WhenTheUserSendsRequestToGetDataAboutTheOrderByIDThenTheSuccessStatusCodeAndTheDataAboutTheOrderAreReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2.2. When the user sends request to get data about the order by ID, then the Succ" +
                    "ess status code and the data about the order are returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table12.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 20
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table13.AddRow(new string[] {
                            "3333",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 23
  testRunner.And("the user sends request to add a new order with the following parameters", ((string)(null)), table13, "And ");
#line hidden
#line 26
 testRunner.When("the user sends request to get information about the order with ID 3333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table14.AddRow(new string[] {
                            "3333",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 28
  testRunner.And("the response contains the following information about the order", ((string)(null)), table14, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2.3. When the user sends request to delete data about the order by ID, then the S" +
            "uccess status code is returned")]
        public virtual void _2_3_WhenTheUserSendsRequestToDeleteDataAboutTheOrderByIDThenTheSuccessStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2.3. When the user sends request to delete data about the order by ID, then the S" +
                    "uccess status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table15.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 33
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table15, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table16.AddRow(new string[] {
                            "3333",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 36
  testRunner.And("the user sends request to add a new order with the following parameters", ((string)(null)), table16, "And ");
#line hidden
#line 39
 testRunner.When("the user sends request to delete information about the order with ID 3333", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then("the response with \'OK\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2.4. When the user sends request to get data about the order by ID that doesn\'t e" +
            "xist, then the Not Found status code is returned")]
        public virtual void _2_4_WhenTheUserSendsRequestToGetDataAboutTheOrderByIDThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2.4. When the user sends request to get data about the order by ID that doesn\'t e" +
                    "xist, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table17.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 43
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table17, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table18.AddRow(new string[] {
                            "3333",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 46
  testRunner.And("the user sends request to add a new order with the following parameters", ((string)(null)), table18, "And ");
#line hidden
#line 49
 testRunner.When("the user sends request to get information about the order with ID 4444", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Type",
                            "Message"});
                table19.AddRow(new string[] {
                            "1",
                            "error",
                            "Order not found"});
#line 51
  testRunner.And("the message contains the following information", ((string)(null)), table19, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("2.5. When the user sends request to delete data about the order by ID that doesn\'" +
            "t exist, then the Not Found status code is returned")]
        public virtual void _2_5_WhenTheUserSendsRequestToDeleteDataAboutTheOrderByIDThatDoesntExistThenTheNotFoundStatusCodeIsReturned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2.5. When the user sends request to delete data about the order by ID that doesn\'" +
                    "t exist, then the Not Found status code is returned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "CategoryId",
                            "CategoryName",
                            "Name",
                            "PhotoUrls",
                            "TagsId",
                            "TagName",
                            "Status"});
                table20.AddRow(new string[] {
                            "2222",
                            "1",
                            "Dog",
                            "Zima",
                            "example.com",
                            "52",
                            "Small breed",
                            "available"});
#line 56
 testRunner.Given("the user sends request to add a new pet with the following parameters", ((string)(null)), table20, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "PetId",
                            "Quantity",
                            "ShipDate",
                            "Status",
                            "Complete"});
                table21.AddRow(new string[] {
                            "3333",
                            "2222",
                            "1",
                            "2023-10-06T00:00:00.000Z",
                            "placed",
                            "false"});
#line 59
  testRunner.And("the user sends request to add a new order with the following parameters", ((string)(null)), table21, "And ");
#line hidden
#line 62
 testRunner.When("the user sends request to delete information about the order with ID 4444", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then("the response with \'NotFound\' status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
